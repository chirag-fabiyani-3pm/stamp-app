'use client'

import React, { useState, useRef, useEffect, useCallback } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog'
import { cn } from '@/lib/utils'
import { useChatContext } from '@/lib/context/chat-context'
import { Message, StampPreview, StructuredData } from '@/types/voice-chat'
import { MarkdownMessage } from './markdown-message'
import { StampPreviewDisplay } from './stamp-preview-display'
import { StampCardDisplay } from './stamp-card-display'
import { StampCarouselDisplay } from './stamp-carousel-display'
import { ImageSearch } from './image-search'
import { VoiceChatPanel } from './voice-chat-panel'
import { AudioLines, MessageSquare, Send, X, RotateCcw, Mic, MicOff, Volume2, VolumeX, Settings, Zap, Sparkles, Star, Clock, TrendingUp, Users, Globe, BookOpen, Search, Filter, SortAsc, SortDesc, ChevronDown, ChevronUp, ChevronLeft, ChevronRight, Play, Pause, SkipBack, SkipForward, Repeat, Shuffle, Heart, Share, Download, Upload, Edit, Trash, Eye, EyeOff, Lock, Unlock, Key, Shield, CheckCircle, AlertCircle, Info, HelpCircle, Phone, Mail, MapPin, Calendar, Tag, Hash, AtSign, DollarSign, Percent, Plus, Minus, Equal, Divide, Multiply, Calculator, BarChart3, PieChart, LineChart, Activity, Target, Award, Trophy, Medal, Crown, Gem, Diamond, Ruby, Emerald, Sapphire, Pearl, Gold, Silver, Bronze, Platinum, Iron, Steel, Copper, Aluminum, Titanium, Carbon, Silicon, Oxygen, Hydrogen, Nitrogen, Helium, Neon, Argon, Krypton, Xenon, Radon, Uranium, Plutonium, Thorium, Radium, Polonium, Astatine, Francium, Radon, Actinium, Protactinium, Neptunium, Americium, Curium, Berkelium, Californium, Einsteinium, Fermium, Mendelevium, Nobelium, Lawrencium, Rutherfordium, Dubnium, Seaborgium, Bohrium, Hassium, Meitnerium, Darmstadtium, Roentgenium, Copernicium, Nihonium, Flerovium, Moscovium, Livermorium, Tennessine, Oganesson } from 'lucide-react'

const BACKEND_URL = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:3001'

export function PhilaGuideChat() {
    const { isOpen, setIsOpen } = useChatContext()
    const [messages, setMessages] = useState<Message[]>([])
    const [input, setInput] = useState('')
    const [isLoading, setIsLoading] = useState(false)
    const [streamingStatus, setStreamingStatus] = useState<string>('')
    const [abortController, setAbortController] = useState<AbortController | null>(null)
    const [sessionId] = useState(() => `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`)
    const messagesEndRef = useRef<HTMLDivElement>(null)

    // Voice interaction
    const [isListening, setIsListening] = useState(false)
    const [transcript, setTranscript] = useState('')
    const [isStreamingAI, setIsStreamingAI] = useState(false)
    const [currentStreamingId, setCurrentStreamingId] = useState<string | null>(null)
    const isStreamingAIRef = useRef(false)
    const currentStreamingIdRef = useRef<string | null>(null)
    const pendingAIMessage = useRef<{ id: string, deltas: string[] } | null>(null)

    // Voice mode state
    const [isVoiceMode, setIsVoiceMode] = useState(false)
    const [voiceMessages, setVoiceMessages] = useState<Message[]>([])
    const [isVoiceProcessing, setIsVoiceProcessing] = useState(false)
    const [selectedVoice, setSelectedVoice] = useState<string>('alloy')
    const [isImageSearchOpen, setIsImageSearchOpen] = useState(false)

    // Voice synthesis
    const [speechSynthesis, setSpeechSynthesis] = useState<SpeechSynthesis | null>(null)
    const [availableVoices, setAvailableVoices] = useState<SpeechSynthesisVoice[]>([])
    const [isSpeaking, setIsSpeaking] = useState(false)
    const [currentUtterance, setCurrentUtterance] = useState<SpeechSynthesisUtterance | null>(null)

    // Initialize speech synthesis
    useEffect(() => {
        if (typeof window !== 'undefined' && 'speechSynthesis' in window) {
            const synth = window.speechSynthesis
            setSpeechSynthesis(synth)

            const loadVoices = () => {
                const voices = synth.getVoices()
                setAvailableVoices(voices)
                console.log('ðŸŽ¤ Available voices:', voices.length)
            }

            if (synth.onvoiceschanged !== undefined) {
                synth.onvoiceschanged = loadVoices
            }

            loadVoices()
        }
    }, [])

    // Scroll to bottom when messages change
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
    }, [messages, voiceMessages])

    // Voice mode toggle
    const toggleVoiceMode = () => {
        setIsVoiceMode(!isVoiceMode)
        if (isVoiceMode) {
            // Switching to text mode
            setMessages(voiceMessages)
        } else {
            // Switching to voice mode
            setVoiceMessages(messages)
        }
    }

    // Handle voice mode change from panel
    const setSelectedVoiceFromPanel = (voice: string) => {
        setSelectedVoice(voice)
        console.log('ðŸŽ¤ Voice changed to:', voice)
    }

    // Handle transcript from voice panel
    const handleTranscript = (text: string) => {
        setTranscript(text)

        if (text.trim()) {
            console.log('ðŸŽ¤ handleTranscript received:', JSON.stringify(text))
            console.log('ðŸŽ¤ Voice mode active:', isVoiceMode)
            console.log('ðŸŽ¤ Current messages length:', messages.length)
            console.log('ðŸŽ¤ Current voiceMessages length:', voiceMessages.length)

            if (text.startsWith('\nYou: ')) {
                const pendingAI = pendingAIMessage.current
                console.log('ðŸŽ¤ User message received, checking for pending AI:', !!pendingAI)

                if (pendingAI) {
                    console.log('ðŸŽ¤ Pending AI message details:', {
                        id: pendingAI.id,
                        deltasCount: pendingAI.deltas.length,
                        contentPreview: pendingAI.deltas.join('').substring(0, 100)
                    })
                }

                isStreamingAIRef.current = false
                currentStreamingIdRef.current = null
                setIsStreamingAI(false)
                setCurrentStreamingId(null)
                const userMessage = text.replace('\nYou: ', '').trim()
                console.log('ðŸŽ¤ Extracted user message:', JSON.stringify(userMessage))

                if (userMessage) {
                    const newMessage: Message = {
                        id: Date.now().toString(),
                        content: userMessage,
                        role: 'user',
                        timestamp: new Date()
                    }

                    console.log('ðŸŽ¤ Creating user message:', newMessage)

                    setMessages(prev => {
                        console.log('ðŸŽ¤ Adding to messages array, current length:', prev.length)
                        return [...prev, newMessage]
                    })
                    setVoiceMessages(prev => {
                        console.log('ðŸŽ¤ Adding to voiceMessages array, current length:', prev.length)
                        return [...prev, newMessage]
                    })
                    console.log('ðŸŽ¤ âœ… Successfully added user voice message:', userMessage)

                    if (pendingAI) {
                        const aiMessageId = pendingAI.id
                        const queuedDeltas = pendingAI.deltas

                        console.log('ðŸŽ¤ Creating AI message from pending queue - ID:', aiMessageId, 'Deltas count:', queuedDeltas.length)
                        console.log('ðŸŽ¤ Queued content preview:', queuedDeltas.join('').substring(0, 100) + '...')

                        const aiMessage: Message = {
                            id: aiMessageId,
                            content: queuedDeltas.join(''),
                            role: 'assistant',
                            timestamp: new Date()
                        }

                        setMessages(prev => {
                            console.log('ðŸŽ¤ Adding queued AI message to messages array, current length:', prev.length)
                            return [...prev, aiMessage]
                        })
                        setVoiceMessages(prev => {
                            console.log('ðŸŽ¤ Adding queued AI message to voiceMessages array, current length:', prev.length)
                            return [...prev, aiMessage]
                        })

                        console.log('ðŸŽ¤ âœ… Successfully created AI message from pending queue')
                        pendingAIMessage.current = null
                    }

                    // Process the voice message
                    handleVoiceChatMessage(userMessage)
                }
            } else if (text.startsWith('\nAssistant: ')) {
                const assistantMessage = text.replace('\nAssistant: ', '').trim()
                console.log('ðŸŽ¤ Assistant message received:', JSON.stringify(assistantMessage))

                if (assistantMessage) {
                    const newMessage: Message = {
                        id: Date.now().toString(),
                        content: assistantMessage,
                        role: 'assistant',
                        timestamp: new Date()
                    }

                    setMessages(prev => [...prev, newMessage])
                    setVoiceMessages(prev => [...prev, newMessage])
                    console.log('ðŸŽ¤ âœ… Successfully added assistant voice message:', assistantMessage)
                }
            }
        }
    }

    // Handle voice chat message
    const handleVoiceChatMessage = async (message: string): Promise<string> => {
        console.log('ðŸŽ¤ handleVoiceChatMessage called with:', message)
        try {
            console.log('ðŸŽ¤ Making API request to:', `${BACKEND_URL}/api/philaguide`)
            const response = await fetch(`${BACKEND_URL}/api/philaguide`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message,
                    history: [],
                    stream: true,
                    voiceChat: true
                }),
            })
            console.log('ðŸŽ¤ API response status:', response.status)

            const reader = response.body?.getReader()
            if (!reader) {
                throw new Error('No response body')
            }

            let accumulatedContent = ''

            while (true) {
                const { done, value } = await reader.read()
                if (done) break

                const chunk = new TextDecoder().decode(value)
                const lines = chunk.split('\n')

                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        try {
                            const data = JSON.parse(line.slice(6))

                            if (data.type === 'content') {
                                accumulatedContent += data.content
                            } else if (data.type === 'error') {
                                throw new Error(data.error)
                            } else if (data.type === 'timeout') {
                                return 'I apologize, but the request is taking too long. Please try a more specific query about stamps.'
                            }
                        } catch (parseError) {
                            console.error('Error parsing voice stream data:', parseError)
                        }
                    }
                }
            }

            const voiceResponse = accumulatedContent || "I couldn't generate a response for that query."

            console.log('ðŸŽ¤ Voice response length:', voiceResponse.length)
            console.log('ðŸŽ¤ Voice response preview:', voiceResponse.substring(0, 100) + '...')
            return voiceResponse
        } catch (error) {
            console.error('Error sending voice message:', error)
            return 'Sorry, I encountered an error. Please try again.'
        }
    }

    // Speak response
    const speakResponse = async (text: string) => {
        if (!speechSynthesis || !text.trim()) return

        try {
            if (currentUtterance) {
                speechSynthesis.cancel()
            }

            const utterance = new SpeechSynthesisUtterance(text)
            utterance.voice = availableVoices.find(voice => voice.name === selectedVoice) || null
            utterance.rate = 0.9
            utterance.pitch = 1.0
            utterance.volume = 0.8

            utterance.onstart = () => {
                setIsSpeaking(true)
                setCurrentUtterance(utterance)
                console.log('ðŸŽ¤ Started speaking:', text.substring(0, 50) + '...')
            }

            utterance.onend = () => {
                setIsSpeaking(false)
                setCurrentUtterance(null)
                console.log('ðŸŽ¤ Finished speaking')
            }

            utterance.onerror = (event) => {
                console.error('ðŸŽ¤ Speech synthesis error:', event.error)
                setIsSpeaking(false)
                setCurrentUtterance(null)
            }

            speechSynthesis.speak(utterance)
        } catch (error) {
            console.error('ðŸŽ¤ Error in speakResponse:', error)
        }
    }

    // Handle send message
    const handleSendMessage = async () => {
        if (!input.trim() || isLoading) return

        const userMessage: Message = {
            id: Date.now().toString(),
            content: input.trim(),
            role: 'user',
            timestamp: new Date()
        }

        setMessages(prev => [...prev, userMessage])
        setInput('')
        setIsLoading(true)
        setStreamingStatus('Processing your request...')

        try {
            const controller = new AbortController()
            setAbortController(controller)

            const response = await fetch(`${BACKEND_URL}/api/philaguide`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: userMessage.content,
                    history: messages.map(m => ({ role: m.role, content: m.content })),
                    stream: true
                }),
                signal: controller.signal
            })

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`)
            }

            const reader = response.body?.getReader()
            if (!reader) {
                throw new Error('No response body')
            }

            const assistantMessage: Message = {
                id: (Date.now() + 1).toString(),
                content: '',
                role: 'assistant',
                timestamp: new Date()
            }

            setMessages(prev => [...prev, assistantMessage])

            let accumulatedContent = ''
            let hasStructuredData = false

            while (true) {
                const { done, value } = await reader.read()
                if (done) break

                const chunk = new TextDecoder().decode(value)
                const lines = chunk.split('\n')

                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        try {
                            const data = JSON.parse(line.slice(6))

                            if (data.type === 'content') {
                                accumulatedContent += data.content
                                setMessages(prev => prev.map(msg =>
                                    msg.id === assistantMessage.id
                                        ? { ...msg, content: accumulatedContent }
                                        : msg
                                ))
                                setStreamingStatus('Generating response...')
                            } else if (data.type === 'structured_data') {
                                hasStructuredData = true
                                setMessages(prev => prev.map(msg =>
                                    msg.id === assistantMessage.id
                                        ? { ...msg, structuredData: data.data }
                                        : msg
                                ))
                                setStreamingStatus('Processing structured data...')
                            } else if (data.type === 'stamp_preview') {
                                setMessages(prev => prev.map(msg =>
                                    msg.id === assistantMessage.id
                                        ? { ...msg, stampPreview: data.preview }
                                        : msg
                                ))
                                setStreamingStatus('Processing stamp data...')
                            } else if (data.type === 'error') {
                                throw new Error(data.error)
                            } else if (data.type === 'timeout') {
                                setMessages(prev => prev.map(msg =>
                                    msg.id === assistantMessage.id
                                        ? { ...msg, content: 'I apologize, but the request is taking too long. Please try a more specific query about stamps.' }
                                        : msg
                                ))
                                break
                            }
                        } catch (parseError) {
                            console.error('Error parsing stream data:', parseError)
                        }
                    }
                }
            }

            if (!hasStructuredData && accumulatedContent) {
                setMessages(prev => prev.map(msg =>
                    msg.id === assistantMessage.id
                        ? { ...msg, content: accumulatedContent }
                        : msg
                ))
            }

            setStreamingStatus('')
        } catch (error) {
            if (error instanceof Error && error.name === 'AbortError') {
                console.log('Request was aborted')
            } else {
                console.error('Error sending message:', error)
                setMessages(prev => [...prev, {
                    id: (Date.now() + 1).toString(),
                    content: 'Sorry, I encountered an error. Please try again.',
                    role: 'assistant',
                    timestamp: new Date()
                }])
            }
        } finally {
            setIsLoading(false)
            setStreamingStatus('')
            setAbortController(null)
        }
    }

    // Handle key down
    const handleKeyDown = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault()
            handleSendMessage()
        }
    }

    // Handle new chat
    const handleNewChat = () => {
        setMessages([])
        setVoiceMessages([])
        setInput('')
        setIsLoading(false)
        setStreamingStatus('')
        if (abortController) {
            abortController.abort()
            setAbortController(null)
        }
    }

    // Main component render
    return (
        <>
            {/* Chat button is now in HeaderActions */}
            <div
                className={cn(
                    "fixed right-0 top-0 h-full w-full max-w-md flex flex-col z-50 bg-gradient-to-b from-slate-900/95 via-slate-800/90 to-slate-900/95 backdrop-blur-2xl shadow-2xl transition-all duration-700 ease-out",
                    isOpen ? "translate-x-0" : "translate-x-full"
                )}
                data-state={isOpen ? "open" : "closed"}
            >
                {/* Futuristic Header */}
                <div className="relative p-6 bg-gradient-to-r from-blue-600/20 via-purple-600/20 to-cyan-600/20 border-b border-white/10 backdrop-blur-xl">
                    {/* Animated background elements */}
                    <div className="absolute inset-0 bg-gradient-to-r from-blue-500/5 via-purple-500/5 to-cyan-500/5 animate-pulse"></div>
                    <div className="absolute top-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-blue-400/50 to-transparent"></div>

                    <div className="relative flex items-center justify-between">
                        <div className="flex items-center gap-4 min-w-0">
                            <div className="relative">
                                <div className="absolute inset-0 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full blur-sm animate-pulse"></div>
                                <Avatar className="relative w-12 h-12 flex-shrink-0 border-2 border-white/20 bg-gradient-to-br from-blue-500 to-purple-600 shadow-lg">
                                    <AvatarImage src="/images/stamp-bot-avatar.png" alt="PhilaGuide AI" />
                                    <AvatarFallback className="bg-gradient-to-br from-blue-500 to-purple-600 text-white font-bold text-lg">PG</AvatarFallback>
                                </Avatar>
                            </div>
                            <div className="min-w-0">
                                <h3 className="font-bold text-xl text-white truncate drop-shadow-sm">PhilaGuide AI</h3>
                                <p className="text-sm text-blue-100/80 truncate font-medium">Your intelligent stamp companion</p>
                            </div>
                        </div>

                        {/* Futuristic Action Buttons */}
                        <div className="relative flex items-center gap-3">
                            <Button
                                variant="ghost"
                                size="sm"
                                onClick={toggleVoiceMode}
                                className={cn(
                                    "h-9 px-4 text-sm font-medium rounded-full transition-all duration-300 bg-white/10 hover:bg-white/20 text-white border border-white/20 hover:border-white/40 backdrop-blur-sm",
                                    isVoiceMode
                                        ? "bg-blue-500/30 border-blue-400/50 text-blue-100 shadow-lg shadow-blue-500/25"
                                        : "hover:shadow-lg hover:shadow-white/10"
                                )}
                            >
                                <AudioLines className="w-4 h-4 mr-2" />
                                {isVoiceMode ? 'Text Mode' : 'Voice Mode'}
                            </Button>

                            <AlertDialog>
                                <AlertDialogTrigger asChild>
                                    <Button
                                        variant="ghost"
                                        size="sm"
                                        className="h-9 px-4 text-sm font-medium rounded-full transition-all duration-300 bg-white/10 hover:bg-white/20 text-white border border-white/20 hover:border-white/40 backdrop-blur-sm hover:shadow-lg hover:shadow-white/10"
                                        title="Start new chat session"
                                    >
                                        <RotateCcw className="w-4 h-4 mr-2" />
                                        New Chat
                                    </Button>
                                </AlertDialogTrigger>
                                <AlertDialogContent className="bg-slate-800/95 border-white/10 backdrop-blur-xl">
                                    <AlertDialogHeader>
                                        <AlertDialogTitle className="text-white">Start New Chat?</AlertDialogTitle>
                                        <AlertDialogDescription className="text-slate-300">
                                            This will clear your current conversation history. Are you sure you want to start a new chat session?
                                        </AlertDialogDescription>
                                    </AlertDialogHeader>
                                    <AlertDialogFooter>
                                        <AlertDialogCancel className="bg-slate-700/50 border-slate-600 text-slate-300 hover:bg-slate-600/50">Cancel</AlertDialogCancel>
                                        <AlertDialogAction onClick={handleNewChat} className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700">
                                            Start New Chat
                                        </AlertDialogAction>
                                    </AlertDialogFooter>
                                </AlertDialogContent>
                            </AlertDialog>

                            <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => setIsOpen(false)}
                                className="h-9 w-9 p-0 rounded-full transition-all duration-300 bg-white/10 hover:bg-white/20 text-white border border-white/20 hover:border-white/40 backdrop-blur-sm hover:shadow-lg hover:shadow-white/10"
                            >
                                <X className="w-5 h-5" />
                            </Button>
                        </div>
                    </div>
                </div>

                {/* Messages */}
                <ScrollArea className="flex-1 p-4 bg-background/70">
                    <div className="space-y-4">
                        {/* Welcome message based on mode */}
                        {(isVoiceMode ? voiceMessages : messages).length === 0 && (
                            <div className="text-center py-8 px-4">
                                <div className="w-20 h-20 mx-auto mb-6 bg-primary/10 rounded-full flex items-center justify-center animate-pulse-slow">
                                    {isVoiceMode ? (
                                        <AudioLines className="w-10 h-10 text-primary" />
                                    ) : (
                                        <MessageSquare className="w-10 h-10 text-primary" />
                                    )}
                                </div>
                                <h3 className="text-xl font-bold text-foreground mb-3">
                                    {isVoiceMode ? 'Voice Chat Mode' : 'Welcome to PhilaGuide AI!'}
                                </h3>
                                <p className="text-sm text-muted-foreground mb-8 leading-relaxed">
                                    {isVoiceMode
                                        ? 'Speak naturally to ask about stamps, values, history, or collecting tips. Click the microphone to start speaking.'
                                        : 'I\'m your specialized stamp collecting assistant. Ask me about stamps, values, history, or collecting tips, or use the image search feature.'
                                    }
                                </p>

                                {!isVoiceMode && (
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                        <button
                                            onClick={() => setInput("Tell me about the Penny Black stamp")}
                                            className="text-left p-4 bg-background hover:bg-accent rounded-xl border border-input text-sm transition-colors w-full shadow-sm flex flex-col items-start"
                                        >
                                            <div className="font-semibold text-foreground mb-1">Tell me about the Penny Black stamp</div>
                                            <div className="text-xs text-muted-foreground">World's first postage stamp.</div>
                                        </button>
                                        <button
                                            onClick={() => setInput("Show me rare stamps from New Zealand")}
                                            className="text-left p-4 bg-background hover:bg-accent rounded-xl border border-input text-sm transition-colors w-full shadow-sm flex flex-col items-start"
                                        >
                                            <div className="font-semibold text-foreground mb-1">Show me rare stamps from New Zealand</div>
                                            <div className="text-xs text-muted-foreground">Discover valuable New Zealand issues.</div>
                                        </button>
                                        <button
                                            onClick={() => setInput("Give me collecting tips for beginners")}
                                            className="text-left p-4 bg-background hover:bg-accent rounded-xl border border-input text-sm transition-colors w-full shadow-sm flex flex-col items-start"
                                        >
                                            <div className="font-semibold text-foreground mb-1">Give me collecting tips for beginners</div>
                                            <div className="text-xs text-muted-foreground">Start your philatelic journey.</div>
                                        </button>
                                        <button
                                            onClick={() => setIsImageSearchOpen(true)}
                                            className="text-left p-4 bg-background hover:bg-accent rounded-xl border border-input text-sm transition-colors w-full shadow-sm flex flex-col items-start"
                                        >
                                            <div className="font-semibold text-foreground mb-1">Identify a stamp from an image</div>
                                            <div className="text-xs text-muted-foreground">Upload a photo of your stamp.</div>
                                        </button>
                                    </div>
                                )}
                            </div>
                        )}

                        {/* Show messages based on current mode */}
                        {(isVoiceMode ? voiceMessages : messages).map((message) => (
                            <div key={message.id} className={cn(
                                "flex gap-3",
                                message.role === 'user' ? "justify-end" : "justify-start"
                            )}>
                                {message.role === 'assistant' && (
                                    <Avatar className="w-9 h-9 flex-shrink-0 border border-input">
                                        <AvatarImage src="/images/stamp-bot-avatar.png" alt="PhilaGuide AI" />
                                        <AvatarFallback className="bg-primary/10 text-primary text-sm">PG</AvatarFallback>
                                    </Avatar>
                                )}
                                <div className={cn(
                                    "max-w-[85%] space-y-2",
                                    message.role === 'user' ? "order-1" : "order-2"
                                )}>
                                    <div className={cn(
                                        "px-4 py-2 text-sm break-words shadow-sm",
                                        message.role === 'user'
                                            ? "bg-primary text-primary-foreground dark:text-black rounded-tl-xl rounded-br-xl rounded-tr-sm rounded-bl-sm ml-auto"
                                            : "bg-muted text-foreground rounded-tr-xl rounded-bl-xl rounded-tl-sm rounded-br-sm mr-auto border border-input"
                                    )}>
                                        {message.role === 'assistant' ? (
                                            <MarkdownMessage content={message.content} />
                                        ) : (
                                            message.content
                                        )}

                                        {/* Timestamp */}
                                        <div className={cn(
                                            "text-xs mt-2 opacity-70",
                                            message.role === 'user'
                                                ? "text-primary-foreground/70 dark:text-black/70"
                                                : "text-muted-foreground"
                                        )}>
                                            {message.timestamp ? new Date(message.timestamp).toLocaleTimeString() : 'Unknown time'}
                                        </div>
                                    </div>

                                    {/* Stamp Preview Display - Only show when no structured data is available */}
                                    {message.stampPreview && !message.structuredData && (
                                        <div className="mt-2 max-w-full">
                                            <StampPreviewDisplay preview={message.stampPreview} />
                                        </div>
                                    )}

                                    {/* Structured Data Display */}
                                    {message.structuredData && (
                                        <div className="mt-2 max-w-full">
                                            {(() => {
                                                console.log('ðŸŽ´ Frontend received structured data:', message.structuredData)
                                                return null
                                            })()}
                                            {message.structuredData.type === 'card' && (
                                                <StampCardDisplay data={message.structuredData} />
                                            )}
                                            {message.structuredData.type === 'carousel' && (
                                                <StampCarouselDisplay data={message.structuredData} />
                                            )}
                                        </div>
                                    )}
                                </div>
                            </div>
                        ))}

                        {/* Show loading state based on current mode */}
                        {(isVoiceMode ? isVoiceProcessing : isLoading) && (
                            <div className="flex gap-3 justify-start">
                                <Avatar className="w-9 h-9 flex-shrink-0 border border-input">
                                    <AvatarImage src="/images/stamp-bot-avatar.png" alt="PhilaGuide AI" />
                                    <AvatarFallback className="bg-primary/10 text-primary text-sm">PG</AvatarFallback>
                                </Avatar>
                                <div className="bg-muted rounded-tr-xl rounded-bl-xl rounded-tl-sm rounded-br-sm px-4 py-2 shadow-sm border border-input">
                                    <div className="flex flex-col gap-1">
                                        <div className="flex gap-1">
                                            <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" />
                                            <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                                            <div className="w-2 h-2 bg-muted-foreground rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                                        </div>
                                        {isVoiceMode ? (
                                            <div className="text-xs text-muted-foreground mt-1">
                                                Processing voice message...
                                            </div>
                                        ) : (
                                            streamingStatus && (
                                                <div className="text-xs text-muted-foreground mt-1">
                                                    {streamingStatus}
                                                </div>
                                            )
                                        )}
                                    </div>
                                </div>
                            </div>
                        )}
                        <div ref={messagesEndRef} />
                    </div>
                </ScrollArea>

                {/* Input */}
                <div className="p-4 border-t border-input bg-card/60">
                    {isVoiceMode ? (
                        /* Voice Chat Input Interface */
                        <div className="space-y-4">
                            {/* Voice Input Display */}
                            <div className="bg-muted/50 rounded-lg p-4 border border-input">
                                <div className="flex items-center gap-3 mb-3">
                                    <AudioLines className="w-5 h-5 text-primary" />
                                    <span className="text-sm font-medium text-foreground">Voice Input</span>
                                </div>

                                {/* VoiceChatPanel Component */}
                                <VoiceChatPanel
                                    onTranscript={handleTranscript}
                                    onClose={() => setIsVoiceMode(false)}
                                    onVoiceChange={setSelectedVoiceFromPanel}
                                    onSpeakResponse={speakResponse}
                                />
                            </div>

                            {/* Voice Chat Instructions */}
                            <div className="text-xs text-muted-foreground text-center">
                                Speak naturally about stamps, values, history, or collecting tips
                            </div>
                        </div>
                    ) : (
                        /* Text Chat Input Interface */
                        <div className="space-y-2">
                            <div className="flex gap-2">
                                <Input
                                    value={input}
                                    onChange={(e) => setInput(e.target.value)}
                                    onKeyDown={handleKeyDown}
                                    placeholder={isLoading ? "AI is processing..." : "Ask PhilaGuide AI..."}
                                    disabled={isLoading}
                                    className="flex-1 text-sm bg-background border-input px-4 py-2.5 rounded-full focus-visible:ring-offset-0 focus-visible:ring-primary"
                                />

                                <Button
                                    onClick={handleSendMessage}
                                    disabled={isLoading || !input.trim()}
                                    size="icon"
                                    className={cn(
                                        "transition-all duration-200 flex-shrink-0 rounded-full",
                                        isLoading
                                            ? "bg-destructive hover:bg-destructive/90"
                                            : input.trim()
                                                ? "bg-primary hover:bg-primary/90"
                                                : "bg-accent/50 hover:bg-accent text-primary-foreground"
                                    )}
                                >
                                    {isLoading ? (
                                        <div className="w-4 h-4 bg-yellow-400 rounded-sm" />
                                    ) : input.trim() ? (
                                        <Send className="w-5 h-5" />
                                    ) : (
                                        <AudioLines className="w-5 h-5" />
                                    )}
                                </Button>
                            </div>
                        </div>
                    )}
                </div>
            </div>

            {/* Image Search Popup */}
            <ImageSearch
                isOpen={isImageSearchOpen}
                onClose={() => setIsImageSearchOpen(false)}
            />
        </>
    )
} 